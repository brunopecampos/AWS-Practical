AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "former2"
Description: ""
Resources:
  IAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "CloudWatchAgentServerRole"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"ec2.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      Description: "Allows EC2 instances to call AWS services on your behalf."

  IAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      InstanceProfileName: !Ref IAMRole
      Roles:
        - !Ref IAMRole

  EC2LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: "opus-launch-template-test"
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt
            - IAMInstanceProfile
            - Arn
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              # install git, node and yarn
              curl -fsSL https://deb.nodesource.com/setup_19.x | sudo -E bash -
              apt update -y
              apt install -y nodejs git stress
              # For testing reasons
              #sudo apt-get install -y mysql-client
              sudo npm install --global yarn
              # install CloudWatch Agent
              cd /home/ubuntu
              curl -o ./amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb 
              dpkg -i -E ./amazon-cloudwatch-agent.deb
              mkdir /usr/share/collectd
              touch /usr/share/collectd/types.db
              # run CloudWatch Agent
              curl -o ./cloudwatch-agent.json https://opus-bruno-campos-stacks.s3.us-west-1.amazonaws.com/cloudwatch-agent.json
              amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:cloudwatch-agent.json -s
              # clone backend subdir of repo
              git clone --depth 1 --filter=blob:none https://github.com/brunopecampos/AWS-Practical.git --sparse 
              cd AWS-Practical 
              git config --global --add safe.directory $PWD
              git sparse-checkout init --cone
              git sparse-checkout set ./EC2/backend
              # install dependencies and start server
              cd ./EC2/backend
              yarn install
              echo ${Endpoint} > db_endpoint
              node server.js
            - Endpoint: !ImportValue RDSEndpoint
        KeyName: "aws_login"
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue SgSSHBastionInboundId
              - !ImportValue SgAlbEC2InboundId
              - !ImportValue SgDBOutboundId
              - !ImportValue SgGithubOutboundId
        ImageId: "ami-0d50e5e845c552faf"
        InstanceType: "t2.micro"

  AutoScalingAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: "opus-asg"
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: 1
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      Cooldown: 300
      AvailabilityZones:
        - !Sub "${AWS::Region}a"
        - !Sub "${AWS::Region}c"
      TargetGroupARNs:
        - !Ref ElasticLoadBalancingV2TargetGroup
      HealthCheckType: "EC2"
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier:
        - !ImportValue SubnetPrivate1aId
        - !ImportValue SubnetPrivate2cId
      TerminationPolicies:
        - "Default"
      ServiceLinkedRoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
      NewInstancesProtectedFromScaleIn: false

  AutoScalingScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingAutoScalingGroup
      PolicyType: "TargetTrackingScaling"
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
        TargetValue: 50
        DisableScaleIn: false

  ElasticLoadBalancingV2TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/get-salary"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "80"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 5
      TargetType: "instance"
      Matcher:
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !ImportValue VPCId
      Name: !Sub "${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}-target-group"
      HealthCheckEnabled: true
      TargetGroupAttributes:
        - Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
          Value: "1"
        - Key: "stickiness.enabled"
          Value: "false"
        - Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
          Value: "off"
        - Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
          Value: "1"
        - Key: "stickiness.app_cookie.cookie_name"
          Value: ""
        - Key: "stickiness.type"
          Value: "lb_cookie"
        - Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - Key: "slow_start.duration_seconds"
          Value: "0"
        - Key: "stickiness.app_cookie.duration_seconds"
          Value: "86400"
        - Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
          Value: "off"
        - Key: "load_balancing.cross_zone.enabled"
          Value: "use_load_balancer_configuration"
        - Key: "load_balancing.algorithm.type"
          Value: "round_robin"
  ElasticLoadBalancingV2LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "opus-alb"
      Scheme: "internet-facing"
      Type: "application"
      Subnets:
        - !ImportValue SubnetPublic1aId
        - !ImportValue SubnetPublic2cId
      SecurityGroups:
        - !ImportValue SgAlbInternetInboundId
        - !ImportValue SgAlbEC2OutboundId
      IpAddressType: "ipv4"
      LoadBalancerAttributes:
        - Key: "access_logs.s3.enabled"
          Value: "false"
        - Key: "idle_timeout.timeout_seconds"
          Value: "60"
        - Key: "deletion_protection.enabled"
          Value: "false"
        - Key: "routing.http2.enabled"
          Value: "true"
        - Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"
        - Key: "routing.http.xff_client_port.enabled"
          Value: "false"
        - Key: "routing.http.preserve_host_header.enabled"
          Value: "false"
        - Key: "routing.http.xff_header_processing.mode"
          Value: "append"
        - Key: "load_balancing.cross_zone.enabled"
          Value: "true"
        - Key: "routing.http.desync_mitigation_mode"
          Value: "defensive"
        - Key: "waf.fail_open.enabled"
          Value: "false"
        - Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
          Value: "false"

  ElasticLoadBalancingV2Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
          Type: "forward"
