AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "former2"
Description: ""
Resources:
  EC2LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: "opus-launch-template-test"
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !ImportValue IamARN
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              # install git, node and yarn
              curl -fsSL https://deb.nodesource.com/setup_19.x | sudo -E bash -
              apt update -y
              apt install -y nodejs git stress
              # For testing reasons
              #sudo apt-get install -y mysql-client
              sudo npm install --global yarn
              # install CloudWatch Agent
              cd /home/ubuntu
              curl -o ./amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb 
              dpkg -i -E ./amazon-cloudwatch-agent.deb
              mkdir /usr/share/collectd
              touch /usr/share/collectd/types.db
              # run CloudWatch Agent
              curl -o ./cloudwatch-agent.json https://opus-bruno-campos-stacks.s3.us-west-1.amazonaws.com/cloudwatch-agent.json
              amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:cloudwatch-agent.json -s
              # clone backend subdir of repo
              git clone --depth 1 --filter=blob:none https://github.com/brunopecampos/AWS-Practical.git --sparse 
              cd AWS-Practical 
              git config --global --add safe.directory $PWD
              git sparse-checkout init --cone
              git sparse-checkout set ./EC2/backend
              # install dependencies and start server
              cd ./EC2/backend
              yarn install
              echo ${Endpoint} > db_endpoint
              node server.js
            - Endpoint: !ImportValue RDSEndpoint
        KeyName: "aws_login"
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue SgSSHBastionInboundId
              - !ImportValue SgAlbEC2InboundId
              - !ImportValue SgDBOutboundId
              - !ImportValue SgGithubOutboundId
        ImageId: "ami-0d50e5e845c552faf"
        InstanceType: "t2.micro"

  AutoScalingAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: "opus-asg"
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: 1
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      Cooldown: 300
      AvailabilityZones:
        - !Sub "${AWS::Region}a"
        - !Sub "${AWS::Region}c"
      TargetGroupARNs:
        - !ImportValue ELBTargetGroupARN
      HealthCheckType: "EC2"
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier:
        - !ImportValue SubnetPrivate1aId
        - !ImportValue SubnetPrivate2cId
      TerminationPolicies:
        - "Default"
      ServiceLinkedRoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
      NewInstancesProtectedFromScaleIn: false

  AutoScalingScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingAutoScalingGroup
      PolicyType: "TargetTrackingScaling"
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
        TargetValue: 50
        DisableScaleIn: false
