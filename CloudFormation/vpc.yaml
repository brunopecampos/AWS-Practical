AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "former2"
Description: ""
Resources:
  # VPC + Subnets + RouteTables
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: "opus-vpc"

  SubnetPublic1a:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !GetAtt SubnetPrivate1a.AvailabilityZone
      CidrBlock: "10.0.0.0/20"
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub "opus-subnet-public1-${SubnetPrivate1a.AvailabilityZone}"

  SubnetPrivate1a:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.0.128.0/20"
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub "opus-subnet-private1-${AWS::Region}a"

  SubnetPublic2c:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: "10.0.16.0/20"
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub "opus-subnet-public2-${AWS::Region}c"

  SubnetPrivate2c:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !GetAtt SubnetPublic2c.AvailabilityZone
      CidrBlock: "10.0.144.0/20"
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub "opus-subnet-private2-${SubnetPublic2c.AvailabilityZone}"

  EC2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "opus-rtb-private1-${SubnetPublic1a.AvailabilityZone}"

  EC2RouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "opus-rtb-public"

  EC2RouteTable3:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "opus-rtb-private2-${SubnetPrivate2c.AvailabilityZone}"

  EC2SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable
      SubnetId: !Ref SubnetPrivate1a

  EC2SubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable2
      SubnetId: !Ref SubnetPublic1a

  EC2SubnetRouteTableAssociation3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable2
      SubnetId: !Ref SubnetPublic2c

  EC2SubnetRouteTableAssociation4:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable3
      SubnetId: !Ref SubnetPrivate2c

  # InternetGateway
  EC2InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "opus-igw"

  EC2VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref EC2InternetGateway
      VpcId: !Ref VPC

  # NAT Gateway
  EC2NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref SubnetPublic1a
      Tags:
        - Key: "Name"
          Value: !Sub "opus-nat-public1-${SubnetPublic1a.AvailabilityZone}"
      AllocationId: !GetAtt EC2EIP2.AllocationId

  EC2NatGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref SubnetPublic2c
      Tags:
        - Key: "Name"
          Value: !Sub "opus-nat-public2-${SubnetPrivate2c.AvailabilityZone}"
      AllocationId: !GetAtt EC2EIP.AllocationId

  EC2EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
      Tags:
        - Key: "Name"
          Value: !Sub "opus-eip-${AWS::Region}c"

  EC2EIP2:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
      Tags:
        - Key: "Name"
          Value: !Sub "opus-eip-${AWS::Region}a"

  # Routes
  EC2Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref EC2NatGateway
      RouteTableId: !Ref EC2RouteTable

  EC2Route2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EC2InternetGateway
      RouteTableId: !Ref EC2RouteTable2

  EC2Route3:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref EC2NatGateway2
      RouteTableId: !Ref EC2RouteTable3

  # Security Groups
  SgSSHBastionInbound:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow access from bastion instance"
      GroupName: "opus-ssh-bastion-inbound"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"

  SgSSHBastionInboundRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref SgSSHBastionInbound
      SourceSecurityGroupId: !Ref SgSSHBastionOutbound
      SourceSecurityGroupOwnerId: !Ref AWS::AccountId
      FromPort: 22
      IpProtocol: "tcp"
      ToPort: 22

  SgSSHBastionOutbound:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows SSH access to bastion instance"
      GroupName: "opus-ssh-bastion-outbound"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - DestinationSecurityGroupId: !Ref SgSSHBastionInbound
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22

  SgSSHMyIPInbound:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows SSH access from my IP"
      GroupName: "opus-ssh-myIP-inbound"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: "189.110.124.33/32"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"

  SgDBInbound:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow db access from instances"
      GroupName: "opus-db-inbound"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"

  SgDBInboundRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref SgDBInbound
      SourceSecurityGroupId: !Ref SgDBOutbound
      SourceSecurityGroupOwnerId: !Ref AWS::AccountId
      FromPort: 3306
      IpProtocol: "tcp"
      ToPort: 3306

  SgDBOutbound:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows db access for instances"
      GroupName: "opus-db-outbound"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - DestinationSecurityGroupId: !Ref SgDBInbound
          FromPort: 3306
          IpProtocol: "tcp"
          ToPort: 3306

  SgGithubOutbound:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows access to github server"
      GroupName: "opus-github-outbound"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443

  SgAlbInternetInbound:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows the internet to access alb"
      GroupName: "opus-alb-internet-inbound"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"

  SgAlbEC2Inbound:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow alb to access EC2 instance"
      GroupName: "opus-alb-EC2-inbound"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"

  SgAlbEC2InboundRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref SgAlbEC2Inbound
      SourceSecurityGroupId: !Ref SgAlbEC2Outbound
      SourceSecurityGroupOwnerId: !Ref AWS::AccountId
      FromPort: 80
      IpProtocol: "tcp"
      ToPort: 80

  SgAlbEC2Outbound:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow alb to access instance"
      GroupName: "opus-alb-EC2-outbound"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - DestinationSecurityGroupId: !Ref SgAlbEC2Inbound
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80

Outputs:
  VPCId:
    Value: !Ref VPC
    Export:
      Name: VPCId

  SubnetPublic1aId:
    Value: !Ref SubnetPublic1a
    Export:
      Name: SubnetPublic1aId
  SubnetPrivate1aId:
    Value: !Ref SubnetPrivate1a
    Export:
      Name: SubnetPrivate1aId
  SubnetPublic2cId:
    Value: !Ref SubnetPublic2c
    Export:
      Name: SubnetPublic2cId
  SubnetPrivate2cId:
    Value: !Ref SubnetPrivate2c
    Export:
      Name: SubnetPrivate2cId

  SgSSHBastionInboundId:
    Value: !GetAtt SgSSHBastionInbound.GroupId
    Export:
      Name: SgSSHBastionInboundId
  SgSSHBastionOutboundId:
    Value: !GetAtt SgSSHBastionOutbound.GroupId
    Export:
      Name: SgSSHBastionOutboundId
  SgSSHMyIPInboundId:
    Value: !GetAtt SgSSHMyIPInbound.GroupId
    Export:
      Name: SgSSHMyIPInboundId
  SgDBInboundId:
    Value: !GetAtt SgDBInbound.GroupId
    Export:
      Name: SgDBInboundId
  SgDBOutboundId:
    Value: !GetAtt SgDBOutbound.GroupId
    Export:
      Name: SgDBOutboundId
  SgGithubOutboundId:
    Value: !GetAtt SgGithubOutbound.GroupId
    Export:
      Name: SgGithubOutboundId
  SgAlbInternetInboundId:
    Value: !GetAtt SgAlbInternetInbound.GroupId
    Export:
      Name: SgAlbInternetInboundId
  SgAlbEC2InboundId:
    Value: !GetAtt SgAlbEC2Inbound.GroupId
    Export:
      Name: SgAlbEC2InboundId
  SgAlbEC2OutboundId:
    Value: !GetAtt SgAlbEC2Outbound.GroupId
    Export:
      Name: SgAlbEC2OutboundId
