AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "former2"
Description: ""
Resources:
  # VPC
  EC2VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: "opus-vpc"

  EC2Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !GetAtt EC2Subnet3.AvailabilityZone
      CidrBlock: "10.0.0.0/20"
      VpcId: !Ref EC2VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub "opus-subnet-public1-${EC2Subnet3.AvailabilityZone}"

  EC2Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !GetAtt EC2Subnet4.AvailabilityZone
      CidrBlock: "10.0.144.0/20"
      VpcId: !Ref EC2VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub "opus-subnet-private2-${EC2Subnet4.AvailabilityZone}"

  EC2Subnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.0.128.0/20"
      VpcId: !Ref EC2VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub "opus-subnet-private1-${AWS::Region}a"

  EC2Subnet4:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: "10.0.16.0/20"
      VpcId: !Ref EC2VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub "opus-subnet-public2-${AWS::Region}c"

  EC2InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "opus-igw"

  EC2NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref EC2Subnet
      Tags:
        - Key: "Name"
          Value: !Sub "opus-nat-public1-${EC2Subnet.AvailabilityZone}"
      AllocationId: "eipalloc-0e29f3566d6eb4964"

  EC2NatGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref EC2Subnet4
      Tags:
        - Key: "Name"
          Value: !Sub "opus-nat-public2-${EC2Subnet2.AvailabilityZone}"
      AllocationId: "eipalloc-0240499b928ac2bab"

  EC2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "Name"
          Value: !Sub "opus-rtb-private1-${EC2Subnet.AvailabilityZone}"

  EC2RouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "Name"
          Value: "opus-rtb-public"

  EC2RouteTable3:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: "Name"
          Value: !Sub "opus-rtb-private2-${EC2Subnet2.AvailabilityZone}"

  EC2Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref EC2NatGateway
      RouteTableId: !Ref EC2RouteTable

  EC2Route2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EC2InternetGateway
      RouteTableId: !Ref EC2RouteTable2

  EC2Route3:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref EC2NatGateway2
      RouteTableId: !Ref EC2RouteTable3

  EC2SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable
      SubnetId: !Ref EC2Subnet3

  EC2SubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable2
      SubnetId: !Ref EC2Subnet

  EC2SubnetRouteTableAssociation3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable2
      SubnetId: !Ref EC2Subnet4

  EC2SubnetRouteTableAssociation4:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable3
      SubnetId: !Ref EC2Subnet2

  EC2VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref EC2InternetGateway
      VpcId: !Ref EC2VPC

  EC2NetworkInterface:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      Description: "Interface for NAT Gateway nat-0b109dfeaad95db05"
      PrivateIpAddress: "10.0.11.187"
      PrivateIpAddresses:
        - PrivateIpAddress: "10.0.11.187"
          Primary: true
      SubnetId: !Ref EC2Subnet
      SourceDestCheck: false

  EC2NetworkInterface2:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      Description: "Interface for NAT Gateway nat-03839ed9b133fa85d"
      PrivateIpAddress: "10.0.20.247"
      PrivateIpAddresses:
        - PrivateIpAddress: "10.0.20.247"
          Primary: true
      SubnetId: !Ref EC2Subnet4
      SourceDestCheck: false

  # S3 Bucket
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "opus-bruno-campos-frontend"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
            BucketKeyEnabled: true
      WebsiteConfiguration:
        IndexDocument: "index.html"

  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowPublicReadAccess"
            Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

  # Security Groups
  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow access from bastion instance"
      GroupName: "opus-ssh-bastion-inbound"
      VpcId: "vpc-0171f0e8254334628"
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref EC2SecurityGroup5
          SourceSecurityGroupOwnerId: !Ref AWS::AccountId
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22

  EC2SecurityGroup2:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows SSH access from my IP"
      GroupName: "opus-ssh-myIP-inbound"
      VpcId: "vpc-0171f0e8254334628"
      SecurityGroupIngress:
        - CidrIp: "191.13.60.249/32"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22
  EC2SecurityGroup3:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows db access for instances"
      GroupName: "opus-db-outbound"
      VpcId: "vpc-0171f0e8254334628"
      SecurityGroupEgress:
        - DestinationSecurityGroupId: !Ref EC2SecurityGroup4
          FromPort: 3306
          IpProtocol: "tcp"
          ToPort: 3306
  EC2SecurityGroup4:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow db access from instances"
      GroupName: "opus-db-inbound"
      VpcId: "vpc-0171f0e8254334628"
      SecurityGroupIngress:
        - SourceSecurityGroupId: "sg-0c7dbf615a68c8b53"
          SourceSecurityGroupOwnerId: !Ref AWS::AccountId
          FromPort: 3306
          IpProtocol: "tcp"
          ToPort: 3306
  EC2SecurityGroup5:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows SSH access to bastion instance"
      GroupName: "opus-ssh-bastion-outbound"
      VpcId: "vpc-0171f0e8254334628"
      SecurityGroupEgress:
        - DestinationSecurityGroupId: "sg-0ad2a7ab441a3ca97"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22
  EC2SecurityGroup6:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows access to github server"
      GroupName: "opus-github-outbound"
      VpcId: "vpc-0171f0e8254334628"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
  EC2SecurityGroup7:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow alb to access instance"
      GroupName: "opus-alb-EC2-outbound"
      VpcId: "vpc-0171f0e8254334628"
      SecurityGroupEgress:
        - DestinationSecurityGroupId: !Ref EC2SecurityGroup9
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
  EC2SecurityGroup8:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows the internet to access alb"
      GroupName: "opus-alb-internet-inbound"
      VpcId: "vpc-0171f0e8254334628"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
  EC2SecurityGroup9:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow alb to access EC2 instance"
      GroupName: "opus-alb-EC2-inbound"
      VpcId: "vpc-0171f0e8254334628"
      SecurityGroupIngress:
        - SourceSecurityGroupId: "sg-0356f80b2f51306d7"
          SourceSecurityGroupOwnerId: !Ref AWS::AccountId
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80

  # RDS
  EC2NetworkInterface3:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      Description: "RDSNetworkInterface"
      PrivateIpAddress: "10.0.154.177"
      PrivateIpAddresses:
        - PrivateIpAddress: "10.0.154.177"
          Primary: true
      SubnetId: !Ref EC2Subnet2
      SourceDestCheck: true
      GroupSet:
        - !Ref EC2SecurityGroup4

  RDSDBInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceIdentifier: "opus-database"
      AllocatedStorage: 20
      DBInstanceClass: "db.t2.micro"
      Engine: "mysql"
      MasterUsername: "admin"
      MasterUserPassword: "admin123"
      PreferredBackupWindow: "06:07-06:37"
      BackupRetentionPeriod: 7
      AvailabilityZone: !Sub "${AWS::Region}c"
      PreferredMaintenanceWindow: "sat:08:42-sat:09:12"
      MultiAZ: false
      EngineVersion: "8.0.28"
      AutoMinorVersionUpgrade: true
      LicenseModel: "general-public-license"
      PubliclyAccessible: false
      StorageType: "gp2"
      Port: 3306
      StorageEncrypted: false
      CopyTagsToSnapshot: true
      MonitoringInterval: 0
      EnableIAMDatabaseAuthentication: false
      EnablePerformanceInsights: false
      DeletionProtection: false
      DBSubnetGroupName: "opus-subnet-group"
      VPCSecurityGroups:
        - !Ref EC2SecurityGroup4
      MaxAllocatedStorage: 200
      DBParameterGroupName: "default.mysql8.0"
      OptionGroupName: "default:mysql-8-0"
      CACertificateIdentifier: "rds-ca-2019"
  RDSDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "subnet group for databse"
      DBSubnetGroupName: "opus-subnet-group"
      SubnetIds:
        - !Ref EC2Subnet2
        - !Ref EC2Subnet3

  # Bastion Instance
  EC2NetworkInterface4:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      Description: ""
      PrivateIpAddress: !GetAtt EC2Instance.PrivateIp
      PrivateIpAddresses:
        - PrivateIpAddress: !GetAtt EC2Instance.PrivateIp
          Primary: true
      SubnetId: !Ref EC2Subnet
      SourceDestCheck: true
      GroupSet:
        - !Ref EC2SecurityGroup2
        - !Ref EC2SecurityGroup5
  EC2NetworkInterfaceAttachment:
    Type: "AWS::EC2::NetworkInterfaceAttachment"
    Properties:
      NetworkInterfaceId: !Ref EC2NetworkInterface4
      DeviceIndex: 0
      InstanceId: !Ref EC2Instance
      DeleteOnTermination: true
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0d50e5e845c552faf"
      InstanceType: "t2.micro"
      KeyName: "aws_login"
      AvailabilityZone: !Sub "${AWS::Region}a"
      Tenancy: "default"
      SubnetId: "subnet-0e72308114578d93f"
      EbsOptimized: false
      SecurityGroupIds:
        - !Ref EC2SecurityGroup2
        - !Ref EC2SecurityGroup5
      SourceDestCheck: true
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            Encrypted: false
            VolumeSize: 8
            SnapshotId: "snap-0d03332bb41895992"
            VolumeType: "gp2"
            DeleteOnTermination: true
      Tags:
        - Key: "Name"
          Value: "opus-bastion"
      HibernationOptions:
        Configured: false
      EnclaveOptions:
        Enabled: false
